<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Position Sizer</title>
  <link rel="manifest" href="manifest.json" />
  <meta name="theme-color" content="#ffffff" />
  <style>
    body { font-family: sans-serif; margin: 0; padding: 1rem; }
    .dark { background: #121212; color: #e0e0e0; }
    input, select { width: 100%; margin-bottom: 0.5rem; padding: 0.5rem; }
    label { font-weight: bold; display: block; margin-top: 1rem; }
    .output { margin-top: 1rem; font-size: 1.2rem; }
  </style>
</head>
<body>
  <h1>Position Sizer</h1>

  <label>Risk Type</label>
  <select id="riskType">
    <option value="dollar">Fixed Dollar</option>
    <option value="percent">Percent of Equity</option>
  </select>

  <label id="riskLabel">Risk Amount ($)</label>
  <input type="number" id="riskAmount" placeholder="e.g. 100" />

  <label>Instrument</label>
  <select id="instrument">
    <option value="MNQ">MNQ</option>
    <option value="MES">MES</option>
    <option value="MGC">MGC</option>
    <option value="MCL">MCL</option>
    <option value="MYM">MYM</option>
    <option value="M2K">M2K</option>
  </select>

  <label>Stop (points)</label>
  <input type="number" id="stopPoints" placeholder="e.g. 10" />

  <label>ATR Value (points)</label>
  <input type="number" id="atr" placeholder="e.g. 8" />

  <div class="output">
    Contracts: <span id="contracts">0</span><br />
    Total Risk ($): <span id="totalRisk">0</span>
  </div>

  <script>
    const tickValues = { MNQ: 0.5, MES: 1.25, MGC: 0.1, MCL: 0.1, MYM: 0.1, M2K: 0.5 };
    const riskTypeEl = document.getElementById('riskType');
    const riskAmountEl = document.getElementById('riskAmount');
    const riskLabel = document.getElementById('riskLabel');
    const instrEl = document.getElementById('instrument');
    const stopEl = document.getElementById('stopPoints');
    const atrEl = document.getElementById('atr');
    const contractsEl = document.getElementById('contracts');
    const totalRiskEl = document.getElementById('totalRisk');

    function calculate() {
      const type = riskTypeEl.value;
      let riskAmt = parseFloat(riskAmountEl.value) || 0;
      if (type === 'percent') {
        // For percent, treat percentage of 100 as dollar amount placeholder;
        riskAmt = riskAmt / 100; 
      }
      const stopPts = parseFloat(stopEl.value) || 0;
      const tick = tickValues[instrEl.value] || 0;
      const perContractRisk = stopPts * tick;
      const contracts = perContractRisk > 0 ? Math.floor(riskAmt / perContractRisk) : 0;
      contractsEl.textContent = contracts;
      totalRiskEl.textContent = type === 'percent'
        ? (riskAmt * 100).toFixed(2) + '%' 
        : '$' + (contracts * perContractRisk).toFixed(2);
    }

    [riskTypeEl, riskAmountEl, instrEl, stopEl, atrEl].forEach(el => {
      el.addEventListener('input', calculate);
    });

    // Dark mode toggle based on system preference
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      document.body.classList.add('dark');
    }

    // Register service worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js');
    }

    calculate();
  </script>
</body>
</html>

<!-- manifest.json -->
{
  "name": "Position Sizer",
  "short_name": "Sizer",
  "start_url": "./index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#ffffff",
  "icons": [
    { "src": "icon-192.png", "sizes": "192x192", "type": "image/png" },
    { "src": "icon-512.png", "sizes": "512x512", "type": "image/png" }
  ]
}

<!-- sw.js -->
const CACHE_NAME = 'position-sizer-v1';
const FILES_TO_CACHE = [
  './index.html',
  './manifest.json',
  './sw.js'
];

self.addEventListener('install', e => {
  e.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(FILES_TO_CACHE))
  );
  self.skipWaiting();
});

self.addEventListener('activate', e => {
  e.waitUntil(
    caches.keys().then(keyList => {
      return Promise.all(
        keyList.map(key => {
          if (key !== CACHE_NAME) {
            return caches.delete(key);
          }
        })
      );
    })
  );
  self.clients.claim();
});

self.addEventListener('fetch', e => {
  e.respondWith(
    caches.match(e.request).then(response => response || fetch(e.request))
  );
});
